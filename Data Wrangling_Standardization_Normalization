#------------------------Data Wrangeling------------------------(the process of converting data from initial format to a format that may be better for analysis)
import pandas as pd
import matplotlib.pylab as plt

filename = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/auto.csv"

headers = ["symboling","normalized-losses","make","fuel-type","aspiration", "num-of-doors","body-style","drive-wheels","engine-location","wheel-base", "length","width","height","curb-weight","engine-type","num-of-cylinders", "engine-size","fuel-system","bore","stroke","compression-ratio","horsepower","peak-rpm","city-mpg","highway-mpg","price"]

df = pd.read_csv(filename, names = headers)

df.head()

#------------------------------------------------
#Replace the missing data "?" to NaN-

import numpy as np

df.replace("?",np.nan, inplace = True)
df.head(5)

#------------------------------------------------('True' values represent missing data)
 #Identify missing data
 missing_data = df.isnull()
 missing_data.head(5)
 
 #------------------------------------------------(Count the missing number of value in each column)
for column in missing_data.columns.values.tolist():
print(column)
print(missing_data[column].value_counts())
print("")

#------------------------------------------------(Calculate the average of "normalized-losses", and replace NaN values)
avg_norm_loss = df["normalized-losses"].astype("float").mean(axis=0)
print("Average of normalized-losses:", avg_norm_loss)

  #Replace "NaN" by mean value in "normalized-losses" column)
df["normalized-losses"].replace(np.nan, avg_norm_loss, inplace=True)

#------------------------------------------------(Calculate the average of "bore", and replace NaN values)
avg_bore=df["bore"].astype('float').mean(axis=0)
print("Average of bore:", avg_bore)

  #Replace Nan with the bore mean value
df["bore"].replace(np.nan, avg_bore, inplace=True)

#------------------------------------------------(Calculate the average of "stroke", and replace NaN values)
avg_stroke=df['stroke'].astype('float').mean(axis=0)
print("Average stroke",avg_stroke)

df["stroke"].replace(np.nan, avg_stroke, inplace=True)

#------------------------------------------------(Calculate the average of "horsepower", and replace NaN values)
avg_horsepower = df['horsepower'].astype('float').mean(axis=0)
print("Average horsepower:", avg_horsepower)

df['horsepower'].replace(np.nan, avg_horsepower, inplace=True)

#------------------------------------------------(Calculate the average of "peak-rpm", and replace NaN values)
avg_peakrpm = df["peak-rpm'].astype("float").mean(axos=0)
print("Average peak rpm:", avg_peakrpm)

df['peak_rpm'].replace(np.nan, avg_peakrpm, inplace=True)

#------------------------------------------------(What door type is most common, and replace missing values)
    #Calculate the count of doors by door type
df['num-of-doors'].value_counts()
    #Calculate the door type that is most common
df['num-of-doors'].value_counts().idmax()
    #Replace the missing values 'NaN' with the most common door count type
df["num-of-doors"].replace(np.nan, "four", inplace=True)

#------------------------------------------------(Drop all rows that do not have price data)
df.dropna(subset=["price"], axis=0, inplace=True)
  #Then reset the index
df.reset_index(drop=True, inplace=True)

df.head()

#---------------------The last stope in data cleaning (checking data to make sure it is in the correct format)---------------------------
  #.dtype() : to check the data type
  #astype() : to change the data type

df[["bore", "stroke"]] = df[["bore", "stroke"]].astype("float")
df[["normalied-losses"]] = df[["normalized-losses]].astype("int')
df[["price"]] = df[["price"]].astype("float")
df[["peak-rpm"]] = df[["peak-rpm"]].astype("float")

df.dtypes


#------------------------Data Standardization------------------------(the process of transforming data in to a common format which allows for meaningful comparison)
  #transform mpg to km (L/100km = 235 / mpg) for features ("city-mpg","highway-mpg")
df.head()
df['city-L/100km'] = 235/df["city-mpg"]
df.head()

df.head()
df['highway-L/100km'] = 235/df["highway-mpg"]
df.head()

  #if you wish to rename the column, use the code below:
df.rename(columns={'"highway-mpg"':'highway-L/100km'},inplace=True)


#------------------------Data Normalization------------------------(the process of trasforming values of several variables into a similar range)
    #typical normalization include scaling the variable so the average = 0, and the variance is 1, so the variable values range from 0 to 1
df['length'] = df['length']/df['length'].max()
df['width'] = df['width']/df['width'].max()
df['height'] = df['height']/df['height'].max()

df[["length","width","height"]].head()
    
#------------------------------------------------Binning (process of transforming continuous numerical variables into discrete categorical 'bins')
df["horsepower"]=df["horsepower"].astype(int, copy=True)
%matplotlib inline
import matplotlib as plt
from matplotlib impoty pyplot
plt.pyplot.hist(df["horsepower"])
  
  #set the x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")

  #transform to create 3 bins of equal distance
bins - np.linspace(min(df["horsepower"]),max(df["horsepower"]),4)
bins

group_names = ['Low', 'Medium', 'High']

  #apply the "cut" function to determine what each values of df['horsepower'] belongs to
df['horsepower-binned'] = pd.cut(df['horsepower'], bins, labels=group_names, include_lowest=True)
df[['horsepower','horsepower-binned']].head(20)

  #how many values per bin
df["horsepower-binned"].value_counts()

  #plot the distribution of each bin
%matplotlib inline
import matplotlib as plt
from matplotlib import pyplot
pyplot.bar(group_names, df["horsepower-binned"].value_counts())

    #set the x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")


#------------------------------------------------Create a histogram to visualize the distribuion of bings we created
%matplotlib inline
import matplotlib as plt
from matplotlib import pyplot

  #draw a histogram
plt.pyplot.hist(df["horsepower"], bins=3)

plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")


#------------------------------------------------Create a dummy value for the "fuel-type" feature to later use in a regression analysis
df.columns

dummy_variable_1 = pd.get_dummies(df["fuel-type"])
dummy_variable)1.head()

  #change the columns for clarity
dummy_variable_1.rename(columns={'gas':'fuel-type-gas','diesel':'fuel-type-diesel'}, inplace=True)
dummy_variable_1.head()

  #merge the "df" and "dummy_variable_1", and drop the orginal column ("fuel-type")
df = pd.concat([df,dummy_variable_1], axis=1)
df.drop("fuel-type", axis = 1, inplace = True)
df.head()

#--------------------Save the new csv----------------------------
df.to_csv('clean_df.csv')
